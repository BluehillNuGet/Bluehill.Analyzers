<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BH0001AnalyzerDescription" xml:space="preserve">
    <value>파생 형식이 없는 클래스는 봉인되어야 합니다.</value>
    <comment>An optional longer localizable description of the diagnostic.</comment>
  </data>
  <data name="BH0001AnalyzerMessageFormat" xml:space="preserve">
    <value>'{0}' 클래스에서 파생된 형식이 없음</value>
    <comment>The format-able message the diagnostic displays.</comment>
  </data>
  <data name="BH0001AnalyzerTitle" xml:space="preserve">
    <value>파생 형식이 없는 클래스는 봉인되어야 함</value>
    <comment>The title of the diagnostic.</comment>
  </data>
  <data name="BH0003AnalyzerDescription" xml:space="preserve">
    <value>기본 생성자의 매개변수를 다시 할당해서는 안됩니다.</value>
  </data>
  <data name="BH0003AnalyzerMessageFormat" xml:space="preserve">
    <value>'{0}'이(가) 다시 할당됨</value>
  </data>
  <data name="BH0003AnalyzerTitle" xml:space="preserve">
    <value>기본 생성자(Primary Constructor) 매개변수 재할당 금지</value>
  </data>
  <data name="BH0004AnalyzerDescription" xml:space="preserve">
    <value>IXmlSerializable.GetSchema()는 명시적으로 구현해야만 합니다.</value>
  </data>
  <data name="BH0004AnalyzerMessageFormat" xml:space="preserve">
    <value>IXmlSerializable.GetSchema()가 명시적으로 구현되지 않음</value>
  </data>
  <data name="BH0004AnalyzerTitle" xml:space="preserve">
    <value>IXmlSerializable.GetSchema()는 명시적으로 구현해야 함</value>
  </data>
  <data name="BH0005AnalyzerDescription" xml:space="preserve">
    <value>IXmlSerializable.GetSchema()는 null을 반환해야만 하며, 추상적이거나 예외를 던져서는 안됩니다.</value>
  </data>
  <data name="BH0005AnalyzerMessageFormat" xml:space="preserve">
    <value>IXmlSerializable.GetSchema()가 null을 반환하지 않음</value>
  </data>
  <data name="BH0005AnalyzerTitle" xml:space="preserve">
    <value>IXmlSerializable.GetSchema()는 null을 반환해야 함</value>
  </data>
  <data name="BH0006AnalyzerDescription" xml:space="preserve">
    <value>IXmlSerializable.GetSchema()를 절대 호출해서는 안됩니다.</value>
  </data>
  <data name="BH0006AnalyzerMessageFormat" xml:space="preserve">
    <value>IXmlSerializable.GetSchema()를 호출하고 있음</value>
  </data>
  <data name="BH0006AnalyzerTitle" xml:space="preserve">
    <value>IXmlSerializable.GetSchema()를 절대 호출해서는 안됨</value>
  </data>
  <data name="BH0009AnalyzerDescription" xml:space="preserve">
    <value>정수 또는 Decimal을 절대로 상수 0으로 나눠서는 안됩니다. 이는 DivideByZeroException을 일으킬 수 있습니다.</value>
  </data>
  <data name="BH0009AnalyzerMessageFormat" xml:space="preserve">
    <value>상수 0으로 나누고 있음</value>
  </data>
  <data name="BH0009AnalyzerTitle" xml:space="preserve">
    <value>정수 또는 Decimal을 절대로 상수 0으로 나눠서는 안됨</value>
  </data>
  <data name="BH0010AnalyzerDescription" xml:space="preserve">
    <value>Span과 상수를 비교할 때는 Span이 실제로 가리키는 대상을 직접 비교하려는 경우가 아니면 동등/부등 연산자 대신 패턴 매칭을 사용해야 합니다.</value>
  </data>
  <data name="BH0010AnalyzerMessageFormat" xml:space="preserve">
    <value>가리키는 객체의 주소값을 비교하려는 것이 아니라면, 대신 패턴 매칭을 사용하세요</value>
  </data>
  <data name="BH0010AnalyzerTitle" xml:space="preserve">
    <value>Span과 상수를 비교할 때 패턴 매칭 사용</value>
  </data>
  <data name="BH0011AnalyzerDescription" xml:space="preserve">
    <value>Span과 비상수를 비교할 때는 Span이 실제로 가리키는 대상을 직접 비교하려는 경우가 아니면 동등/부등 연산자 대신 SequenceEqual 메서드를 사용해야 합니다.</value>
  </data>
  <data name="BH0011AnalyzerMessageFormat" xml:space="preserve">
    <value>가리키는 객체의 주소값을 비교하려는 것이 아니라면, 대신 SequenceEqual 매서드를 사용하세요</value>
  </data>
  <data name="BH0011AnalyzerTitle" xml:space="preserve">
    <value>Span과 비상수를 비교할 때 SequenceEqual 사용</value>
  </data>
  <data name="BH0012AnalyzerDescription" xml:space="preserve">
    <value>필드 이름은 주 생성자 매개변수와 충돌하지 말아야 합니다.</value>
  </data>
  <data name="BH0012AnalyzerMessageFormat" xml:space="preserve">
    <value>'{0}' 이름은 기본 생성자 매개변수 중 하나와 충돌합니다</value>
  </data>
  <data name="BH0012AnalyzerTitle" xml:space="preserve">
    <value>필드 이름은 주 생성자 매개변수와 충돌하지 말아야 함</value>
  </data>
  <data name="BH0014AnalyzerDescription" xml:space="preserve">
    <value>이 열거형에는 ToStringFast() 또는 HasFlagFast() 확장 메서드가 있습니다. 성능 및 AOT 호환성을 위해서 해당 확장 메서드를 대신 사용해야 합니다.</value>
  </data>
  <data name="BH0014AnalyzerMessageFormat" xml:space="preserve">
    <value>'{0}' 메서드 사용</value>
  </data>
  <data name="BH0014AnalyzerTitle" xml:space="preserve">
    <value>ToStringFast() 또는 HasFlagFast() 사용</value>
  </data>
  <data name="BH0015AnalyzerDescription" xml:space="preserve">
    <value>이 열거형에는 Bluehill.EnumExtensionsAttribute가 없지만 ToString() 또는 HasFlag() 메서드를 호출합니다. 성능 및 AOT 호환성을 위해서 Bluehill.EnumExtensionsAttribute를 적용하고 ToStringFast() 또는 HasFlagFast() 확장 메서드를 대신 사용해야 합니다.</value>
  </data>
  <data name="BH0015AnalyzerMessageFormat" xml:space="preserve">
    <value>열거형에 Bluehill.EnumExtensionsAttribute를 적용하고 '{0}' 메서드 사용</value>
  </data>
  <data name="BH0015AnalyzerTitle" xml:space="preserve">
    <value>열거형에 Bluehill.EnumExtensionsAttribute를 적용하고 ToStringFast() 또는 HasFlagFast() 사용</value>
  </data>
  <data name="BH0008AnalyzerDescription" xml:space="preserve">
    <value>부정 패턴은 반복해서 사용하면 안됩니다.</value>
  </data>
  <data name="BH0008AnalyzerMessageFormat" xml:space="preserve">
    <value>'not'을 한번만 사용하거나 아예 사용하지 마세요.</value>
  </data>
  <data name="BH0008AnalyzerTitle" xml:space="preserve">
    <value>부정 패턴을 반복해서 사용하면 안됨</value>
  </data>
</root>