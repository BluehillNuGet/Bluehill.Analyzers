<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BH0001AnalyzerDescription" xml:space="preserve">
    <value>파생 형식이 없는 클래스는 봉인되어야 합니다.</value>
    <comment>An optional longer localizable description of the diagnostic.</comment>
  </data>
  <data name="BH0001AnalyzerMessageFormat" xml:space="preserve">
    <value>'{0}' 클래스에서 파생된 형식이 없음</value>
    <comment>The format-able message the diagnostic displays.</comment>
  </data>
  <data name="BH0001AnalyzerTitle" xml:space="preserve">
    <value>파생 형식이 없는 클래스는 봉인되어야 함</value>
    <comment>The title of the diagnostic.</comment>
  </data>
  <data name="BH0002AnalyzerDescription" xml:space="preserve">
    <value>필드는 형식 정의의 최상단에 위치해야 합니다.</value>
    <comment>An optional longer localizable description of the diagnostic.</comment>
  </data>
  <data name="BH0002AnalyzerMessageFormat" xml:space="preserve">
    <value>'{0}'이(가) 형식 정의 최상단에 위치하지 않음</value>
    <comment>The format-able message the diagnostic displays.</comment>
  </data>
  <data name="BH0002AnalyzerTitle" xml:space="preserve">
    <value>필드는 형식 정의의 최상단에 위치해야 함</value>
    <comment>The title of the diagnostic.</comment>
  </data>
  <data name="BH0003AnalyzerDescription" xml:space="preserve">
    <value>기본 생성자의 매개변수를 다시 할당해서는 안됩니다.</value>
  </data>
  <data name="BH0003AnalyzerMessageFormat" xml:space="preserve">
    <value>'{0}'이(가) 다시 할당됨</value>
  </data>
  <data name="BH0003AnalyzerTitle" xml:space="preserve">
    <value>기본 생성자(Primary Constructor) 매개변수 재할당 금지</value>
  </data>
  <data name="BH0004AnalyzerDescription" xml:space="preserve">
    <value>IXmlSerializable.GetSchema()는 명시적으로 구현해야만 합니다.</value>
  </data>
  <data name="BH0004AnalyzerMessageFormat" xml:space="preserve">
    <value>IXmlSerializable.GetSchema()가 명시적으로 구현되지 않음</value>
  </data>
  <data name="BH0004AnalyzerTitle" xml:space="preserve">
    <value>IXmlSerializable.GetSchema()는 명시적으로 구현해야 함</value>
  </data>
  <data name="BH0005AnalyzerDescription" xml:space="preserve">
    <value>IXmlSerializable.GetSchema()는 null을 반환해야만 하며, 추상적이거나 예외를 던져서는 안됩니다.</value>
  </data>
  <data name="BH0005AnalyzerMessageFormat" xml:space="preserve">
    <value>IXmlSerializable.GetSchema()가 null을 반환하지 않음</value>
  </data>
  <data name="BH0005AnalyzerTitle" xml:space="preserve">
    <value>IXmlSerializable.GetSchema()는 null을 반환해야 함</value>
  </data>
  <data name="BH0006AnalyzerDescription" xml:space="preserve">
    <value>IXmlSerializable.GetSchema()를 절대 호출해서는 안됩니다.</value>
  </data>
  <data name="BH0006AnalyzerMessageFormat" xml:space="preserve">
    <value>IXmlSerializable.GetSchema()를 호출하고 있음</value>
  </data>
  <data name="BH0006AnalyzerTitle" xml:space="preserve">
    <value>IXmlSerializable.GetSchema()를 절대 호출해서는 안됨</value>
  </data>
  <data name="BH0007AnalyzerDescription" xml:space="preserve">
    <value>잠금에는 System.Object 대신 System.Threading.Lock을 사용하는 것이 좋습니다.</value>
  </data>
  <data name="BH0007AnalyzerMessageFormat" xml:space="preserve">
    <value>System.Threading.Lock 사용</value>
  </data>
  <data name="BH0007AnalyzerTitle" xml:space="preserve">
    <value>System.Object보다 System.Threading.Lock을 사용하세요</value>
  </data>
</root>